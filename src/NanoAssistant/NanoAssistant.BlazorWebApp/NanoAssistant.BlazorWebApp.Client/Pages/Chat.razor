@page "/chat"

@attribute [Authorize]

@attribute [StreamRendering(true)]
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false));
@inject HttpClient httpClient;
@inherits OwningComponentBase

<PageTitle>Chat</PageTitle>
<div class="h-full w-full flex flex-col justify-end ">
    <div class="h-full overflow-scroll flex flex-col justify-end ">
        @foreach (var chat in ChatHistory.Chats)
        {
            if (chat.Role == "user")
            {
                <MudStack Class="pa-3" Row="true" Justify="Justify.FlexEnd">
                    <MudPaper Class="pa-3 message-box bg-slate-100">
                        @(chat.Message)
                    </MudPaper>
                </MudStack>
            }
            else if (chat.Role == "assistant")
            {
                <MudStack Class="pa-3" Row="true" Justify="Justify.FlexStart" width="70%">
                    <MudPaper Class="pa-3 message-box bg-transparent">
                        @(chat.Message)
                    </MudPaper>
                </MudStack>
            }
        }
        
   
    </div>
    <div class="bg-background  p-4 flex gap-2 w-full">
        <MudTextField T="string" Variant="Variant.Outlined" @bind-Text="Message" Placeholder="Message" AutoGrow MaxLines="5" />
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.ArrowUpward" DropShadow="false" @onclick="SendUserMessage" />
     </div>
</div>
@code {
    public string Message { get; set; } = string.Empty;
    public Guid IdempotencyKey { get; set; } = Guid.NewGuid();
    public ChatHistoryDto ChatHistory { get; set; } = new ChatHistoryDto();

    protected async override Task OnInitializedAsync()
    {
        await GetChatHistory();
        await base.OnInitializedAsync();
    }

    public async Task SendUserMessage()
    {
        ChatHistory.Chats.Add(new ChatDto()
            {
                Role = "user",
                Message = Message
            });
        var userMessage = new UserMessageDto() { IdempotencyKey = IdempotencyKey.ToString(), Message = Message };
        Message = string.Empty;

        StateHasChanged();

        
        var response = await httpClient.PostAsJsonAsync("/api/chat", userMessage);
        response.EnsureSuccessStatusCode();
        var chat = await response.Content.ReadFromJsonAsync<ChatDto>();
        if (chat != null)
        {
            ChatHistory.Chats.Add(chat);
        }
        IdempotencyKey = Guid.NewGuid();

    }

    public async Task GetChatHistory()
    {
        var response = await httpClient.GetFromJsonAsync<ChatHistoryDto>("/api/chat/history");
        if (response != null)
        {
            ChatHistory = response;
        }
    }
}
